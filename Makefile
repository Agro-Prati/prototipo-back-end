# ===================================
# Makefile - AgroMais Prati Backend
# ===================================

.PHONY: help build up down restart logs clean test package run dev db-up db-down db-logs db-clean install status

# Cores para output
GREEN  := \033[0;32m
YELLOW := \033[0;33m
RED    := \033[0;31m
NC     := \033[0m # No Color

# Vari√°veis
DOCKER_COMPOSE = docker-compose
MVN = ./mvnw
APP_NAME = prototipo-back-agro-spring
JAR_FILE = target/$(APP_NAME)-0.0.1-SNAPSHOT.jar
SPRING_PROFILE = dev

# ===================================
# Help - Mostra todos os comandos
# ===================================
help:
	@echo "$(GREEN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(GREEN)‚ïë      AgroMais Prati - Backend Makefile            ‚ïë$(NC)"
	@echo "$(GREEN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ Docker Commands:$(NC)"
	@echo "  make up              - Sobe todos os containers (DB + Redis + pgAdmin)"
	@echo "  make down            - Para e remove todos os containers"
	@echo "  make restart         - Reinicia todos os containers"
	@echo "  make logs            - Mostra logs dos containers"
	@echo "  make status          - Status dos containers"
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  Database Commands:$(NC)"
	@echo "  make db-up           - Sobe apenas o PostgreSQL"
	@echo "  make db-down         - Para apenas o PostgreSQL"
	@echo "  make db-logs         - Logs do PostgreSQL"
	@echo "  make db-clean        - Remove volumes do banco (CUIDADO!)"
	@echo "  make db-shell        - Acessa shell do PostgreSQL"
	@echo ""
	@echo "$(YELLOW)‚òï Java/Maven Commands:$(NC)"
	@echo "  make install         - Instala depend√™ncias Maven"
	@echo "  make build           - Compila o projeto"
	@echo "  make package         - Gera o JAR"
	@echo "  make test            - Roda os testes"
	@echo "  make run             - Roda a aplica√ß√£o Spring Boot"
	@echo "  make clean           - Limpa target/ e .class"
	@echo ""
	@echo "$(YELLOW)üöÄ Development Commands:$(NC)"
	@echo "  make dev             - Ambiente completo (DB + App rodando)"
	@echo "  make full-restart    - Limpa tudo, reconstr√≥i e sobe"
	@echo "  make check           - Verifica se tudo est√° funcionando"
	@echo ""
	@echo "$(YELLOW)üßπ Cleanup Commands:$(NC)"
	@echo "  make clean-all       - Remove tudo (containers, volumes, target/)"
	@echo ""

# ===================================
# Docker Commands
# ===================================

# Sobe todos os containers
up:
	@echo "$(GREEN)üê≥ Subindo containers...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ PostgreSQL rodando!$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä Servi√ßos dispon√≠veis:$(NC)"
	@echo "  PostgreSQL:  localhost:5433"
	@echo "  pgAdmin:     http://localhost:8081 (admin@admin.com / admin)"
	@echo ""

# Para e remove todos os containers
down:
	@echo "$(RED)üõë Parando containers...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Containers parados!$(NC)"

# Reinicia todos os containers
restart:
	@echo "$(YELLOW)üîÑ Reiniciando containers...$(NC)"
	$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Containers reiniciados!$(NC)"

# Mostra logs
logs:
	$(DOCKER_COMPOSE) logs -f

# Status dos containers
status:
	@echo "$(GREEN)üìä Status dos containers:$(NC)"
	@docker ps --filter "name=agro" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# ===================================
# Database Commands
# ===================================

# Sobe apenas PostgreSQL
db-up:
	@echo "$(GREEN)üóÑÔ∏è  Subindo PostgreSQL...$(NC)"
	$(DOCKER_COMPOSE) up -d agro-db
	@echo "$(GREEN)‚úÖ PostgreSQL rodando em localhost:5433$(NC)"

# Para PostgreSQL
db-down:
	@echo "$(RED)üõë Parando PostgreSQL...$(NC)"
	$(DOCKER_COMPOSE) stop agro-db
	@echo "$(GREEN)‚úÖ PostgreSQL parado!$(NC)"

# Logs do PostgreSQL
db-logs:
	$(DOCKER_COMPOSE) logs -f agro-db

# Remove volumes do banco (CUIDADO!)
db-clean:
	@echo "$(RED)‚ö†Ô∏è  ATEN√á√ÉO: Isso vai DELETAR todos os dados do banco!$(NC)"
	@echo "$(RED)Pressione Ctrl+C para cancelar, ou Enter para continuar...$(NC)"
	@read -r
	$(DOCKER_COMPOSE) down -v
	@echo "$(GREEN)‚úÖ Volumes removidos!$(NC)"

# Shell do PostgreSQL
db-shell:
	@echo "$(GREEN)üêò Acessando PostgreSQL...$(NC)"
	@echo "$(YELLOW)Senha: postgres$(NC)"
	docker exec -it $$(docker ps -qf "name=agro-db") psql -U postgres -d agro_prototipo_db

# ===================================
# Java/Maven Commands
# ===================================

# Instala depend√™ncias
install:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias Maven...$(NC)"
	$(MVN) clean install -DskipTests
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas!$(NC)"

# Compila o projeto
build:
	@echo "$(GREEN)üî® Compilando projeto...$(NC)"
	$(MVN) clean compile
	@echo "$(GREEN)‚úÖ Projeto compilado!$(NC)"

# Gera o JAR
package:
	@echo "$(GREEN)üì¶ Gerando JAR...$(NC)"
	$(MVN) clean package -DskipTests
	@echo "$(GREEN)‚úÖ JAR gerado: $(JAR_FILE)$(NC)"

# Roda testes
test:
	@echo "$(GREEN)üß™ Rodando testes...$(NC)"
	$(MVN) test
	@echo "$(GREEN)‚úÖ Testes conclu√≠dos!$(NC)"

# Roda a aplica√ß√£o
run:
	@echo "$(GREEN)üöÄ Iniciando aplica√ß√£o Spring Boot...$(NC)"
	$(MVN) spring-boot:run -Dspring-boot.run.profiles=$(SPRING_PROFILE)

# Limpa arquivos compilados
clean:
	@echo "$(YELLOW)üßπ Limpando arquivos compilados...$(NC)"
	$(MVN) clean
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

# ===================================
# Development Commands
# ===================================

# Ambiente de desenvolvimento completo
dev: db-up
	@echo "$(GREEN)üöÄ Iniciando ambiente de desenvolvimento...$(NC)"
	@echo "$(YELLOW)‚è≥ Aguardando PostgreSQL inicializar (5s)...$(NC)"
	@sleep 5
	@echo "$(GREEN)‚úÖ PostgreSQL pronto!$(NC)"
	@echo ""
	@echo "$(YELLOW)üî® Compilando e rodando aplica√ß√£o...$(NC)"
	$(MVN) spring-boot:run -Dspring-boot.run.profiles=$(SPRING_PROFILE)

# Restart completo (limpa tudo e reconstr√≥i)
full-restart: clean-all install up
	@echo "$(GREEN)‚ú® Ambiente completamente reconstru√≠do!$(NC)"
	@echo ""
	@echo "$(YELLOW)Para iniciar a aplica√ß√£o, rode:$(NC)"
	@echo "  make run"

# Verifica se tudo est√° OK
check:
	@echo "$(GREEN)üîç Verificando ambiente...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä Containers Docker:$(NC)"
	@docker ps --filter "name=agro" --format "  ‚úì {{.Names}} - {{.Status}}"
	@echo ""
	@echo "$(YELLOW)‚òï Java Version:$(NC)"
	@java -version 2>&1 | head -n 1 | sed 's/^/  ‚úì /'
	@echo ""
	@echo "$(YELLOW)üì¶ Maven Version:$(NC)"
	@$(MVN) -version | head -n 1 | sed 's/^/  ‚úì /'
	@echo ""
	@echo "$(YELLOW)üóÑÔ∏è  PostgreSQL Connection:$(NC)"
	@if docker exec $$(docker ps -qf "name=agro-db") pg_isready -U postgres > /dev/null 2>&1; then \
		echo "  ‚úì PostgreSQL est√° pronto!"; \
	else \
		echo "  ‚úó PostgreSQL n√£o est√° respondendo"; \
	fi
	@echo ""
	@if [ -f $(JAR_FILE) ]; then \
		echo "$(YELLOW)üì¶ JAR File:$(NC)"; \
		echo "  ‚úì $(JAR_FILE) existe"; \
	else \
		echo "$(YELLOW)üì¶ JAR File:$(NC)"; \
		echo "  ‚ö†Ô∏è  JAR n√£o encontrado. Rode 'make package'"; \
	fi

# ===================================
# Cleanup Commands
# ===================================

# Remove tudo
clean-all: down
	@echo "$(RED)üßπ Removendo tudo...$(NC)"
	$(DOCKER_COMPOSE) down -v
	$(MVN) clean
	@rm -rf target/
	@echo "$(GREEN)‚úÖ Limpeza completa!$(NC)"

# ===================================
# Atalhos √∫teis
# ===================================

# Aliases
start: up
stop: down
rebuild: full-restart
